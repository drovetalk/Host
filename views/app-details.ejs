<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Bot.TalkDrove - Manage your WhatsApp bot details">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <title>BOT Details | <%= app.app_name %></title>
    <style>
        :root {
            --primary: #4361ee;
            --primary-hover: #3a53d0;
            --secondary: #e6f0ff;
            --accent: #3f37c9;
            --neutral: #333333;
            --base-100: #ffffff;
            --base-200: #f8fafc;
            --base-300: #f1f5f9;
            --base-hamza: #4895ef;
            --loader: #f8fafc;
            --success: #4ade80;
            --error: #f87171;
            --loaderText: #1e293b;
        }

        [data-theme="dark"] {
            --primary: #4361ee;
            --primary-hover: #3a53d0;
            --secondary: #1e293b;
            --accent: #3f37c9;
            --neutral: #f8fafc;
            --base-100: #0f172a;
            --base-200: #1e293b;
            --base-300: #334155;
            --base-hamza: #1e293b;
            --loader: #0f172a;
            --loaderText: #f8fafc;
        }

        body {
            font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, var(--base-200), var(--base-300));
            color: var(--neutral);
            margin: 0;
            min-height: 100vh;
        }

        .header {
            background-color: var(--base-100);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(229, 231, 235, 0.2);
            padding: 1rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 50;
        }

        .header-content {
            max-width: 1280px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        h1, h2, h3 {
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin: 0 0 1rem 0;
        }

        .controls {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
            border: none;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
        }

        .btn-secondary {
            background-color: var(--base-200);
            color: var(--neutral);
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .main {
            max-width: 1280px;
            margin: 2rem auto;
            padding: 0 1.5rem;
        }

        #config-vars {
            background-color: var(--base-100);
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(229, 231, 235, 0.2);
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .config-var {
            margin-bottom: 1rem;
        }

        .config-var label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--neutral);
            font-weight: 500;
        }

        .config-var input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--base-300);
            border-radius: 0.5rem;
            background-color: var(--base-200);
            color: var(--neutral);
        }

        #deleteAppBtn {
            background-color: var(--error);
            color: white;
        }

        #deleteAppBtn:hover {
            background-color: #f65656;
        }

        #loading-screen {
            position: fixed;
            inset: 0;
            background-color: var(--loader);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }

        #loading-text {
            color: var(--loaderText);
            font-size: 1.5rem;
            font-weight: 500;
        }

        .loader {
            border: 3px solid var(--base-300);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        @media (max-width: 640px) {
            .header-content {
                flex-direction: column;
                align-items: flex-start;
            }

            .controls {
                margin-top: 1rem;
                width: 100%;
                justify-content: space-between;
            }

            .btn span {
                display: none;
            }

            .main {
                padding: 1rem;
            }
        }
        .message {
            position: fixed;
            top: 1.5rem;
            right: 1.5rem;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            color: white;
            font-weight: 500;
            z-index: 100;
            animation: slideIn 0.3s ease;
            display: none;
        }

        .error {
            background-color: var(--error);
        }

        .success {
            background-color: var(--success);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div id="loading-screen">
        <div id="loading-text"></div>
    </div>

    <div id="message" class="message"></div>

    <header class="header">
        <div class="header-content">
            <h1>BOT.TalkDrove</h1>
            <nav class="controls">
                <button id="dashboardBtn" class="btn btn-secondary" onclick="window.location.href='/'">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </button>
                <button id="themeToggle" class="btn btn-secondary">
                    <i class="fas fa-adjust"></i>
                </button>
            </nav>
        </div>
    </header>

    <main class="main">
        <h2><%= app.app_name %></h2>
        <p>Deployed At: <%= app.deployed_at %></p>

        <h3>BOT Config Vars</h3>
        <div id="config-vars">
            <div class="loader" id="loader"></div>
        </div>

        <button id="save-vars-btn" class="btn btn-primary">Save Changes</button>
        <button id="deleteAppBtn" class="btn" data-app-name="<%= app.app_name %>">Delete App</button>
    </main>

    <script>
        // Theme toggle
        const themeToggle = document.getElementById('themeToggle');
        const storedTheme = localStorage.getItem('theme') || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
        document.documentElement.setAttribute('data-theme', storedTheme);

        themeToggle.addEventListener('click', () => {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        });
        function showMessage(type, text) {
            const messageElement = document.getElementById('message');
            messageElement.textContent = text;
            messageElement.className = `message ${type}`;
            messageElement.style.display = 'block';

            setTimeout(() => {
                messageElement.style.animation = 'fadeOut 0.5s ease';
                setTimeout(() => {
                    messageElement.style.display = 'none';
                    messageElement.style.animation = '';
                }, 500);
            }, 3000);
        }

        // Hide loading screen when page is loaded
        window.addEventListener('load', () => {
            document.getElementById('loading-screen').style.display = 'none';
        });
        async function fetchConfigVars() {
            try {
                const appName = '<%= app.app_name %>';
                const response = await fetch(`/api/config-vars/${appName}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch config vars');
                }
                const configVars = await response.json();
                displayConfigVars(configVars);
            } catch (error) {
                console.error('Failed to fetch config vars:', error);
                showMessage('error', 'Failed to load config vars. Please try again.');
            }
        }

        function displayConfigVars(configVars) {
            const configVarsContainer = document.getElementById('config-vars');
            configVarsContainer.innerHTML = '';

            for (const [key, value] of Object.entries(configVars)) {
                const varElement = document.createElement('div');
                varElement.classList.add('config-var');
                varElement.innerHTML = `
                    <label for="${key}">${key}:</label>
                    <input type="text" id="${key}" value="${value}">
                `;
                configVarsContainer.appendChild(varElement);
            }
        }
        async function saveConfigVars() {
            const configVarsContainer = document.getElementById('config-vars');
            const inputs = configVarsContainer.querySelectorAll('input');
            const updatedVars = {};

            inputs.forEach(input => {
                updatedVars[input.id] = input.value;
            });

            try {
                const appName = '<%= app.app_name %>';
                const response = await fetch(`/api/config-vars/${appName}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedVars)
                });

                if (!response.ok) {
                    throw new Error('Failed to update config vars');
                }
                showMessage('success', 'Config vars updated successfully!');
            } catch (error) {
                console.error('Error updating config vars:', error);
                showMessage('error', 'Failed to update config vars. Please try again.');
            }
        }

        document.getElementById('save-vars-btn').addEventListener('click', saveConfigVars);

        const deleteAppBtn = document.getElementById('deleteAppBtn');
        deleteAppBtn.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to delete' + ' "<%= app.app_name %>"?   ')) {
                return;
            }

            const appName = deleteAppBtn.getAttribute('data-app-name');
            try {
                const response = await fetch(`/delete-app/${appName}`, { method: 'DELETE' });
                if (!response.ok) {
                    throw new Error('Failed to delete app');
                }
                showMessage('success', 'App deleted successfully. Redirecting to dashboard...');
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            } catch (error) {
                console.error(error);
                showMessage('error', 'Failed to delete app. Please try again.');
            }
        });

        // Loader
        document.addEventListener('DOMContentLoaded', function() {
            const loadingText = document.getElementById('loading-text');
            const messages = [
                'Loading.',
                'Loading..',
                'Loading...',
                'Loading..',
                'Loading.',
            ];
            let currentMessageIndex = 0;

            function showNextMessage() {
                loadingText.textContent = messages[currentMessageIndex];
                currentMessageIndex = (currentMessageIndex + 1) % messages.length;
            }

            showNextMessage();

            const messageInterval = setInterval(showNextMessage, 100);

            setTimeout(function() {
                clearInterval(messageInterval);
                document.getElementById('loading-screen').style.display = 'none';
            }, 1000);
        });

        fetchConfigVars();
    </script>
</body>
</html>